[{"name": "app.py", "content": "import faicons as fa\nimport plotly.express as px\nfrom pathlib import Path\n\n# Load data and compute static values\nfrom shared import app_dir, tips\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport numpy as np\n\nbill_rng = (min(tips.total_bill), max(tips.total_bill))\n\n# Add page title and sidebar\nui.page_opts(title=\"Restaurant tipping\", fillable=False)\n\nwith ui.sidebar(open=\"desktop\"):\n\n    ui.input_radio_buttons(\n        \"filter_days\",\n        \"Filter Days\",\n        [\"All\", \"Thur\", \"Fri\", \"Sat\", \"Sun\"],  # Single radio button group for all filtering options\n        selected=\"All\",  # Default to \"All\" (show all days by default)\n        inline=False,\n    )\n\n    ui.input_checkbox_group(\n        \"time\",\n        \"Food service\",\n        [\"Lunch\", \"Dinner\"],\n        selected=[\"Lunch\", \"Dinner\"],\n        inline=True,\n    )\n\n    ui.input_slider(\n        \"total_bill\",\n        \"Bill amount\",\n        min=bill_rng[0],\n        max=bill_rng[1],\n        value=bill_rng,\n        pre=\"$\",\n    )\n\n    ui.input_action_button(\"reset\", \"Reset filter\")\n\n# Add main content\n\nICONS = {\n    \"user\": fa.icon_svg(\"user\", \"regular\"),\n    \"wallet\": fa.icon_svg(\"wallet\"),\n    \"currency-dollar\": fa.icon_svg(\"dollar-sign\"),\n    \"ellipsis\": fa.icon_svg(\"ellipsis\"),\n}\n\nwith ui.layout_columns(fill=False):\n    with ui.value_box(showcase=ICONS[\"user\"], theme=ui.value_box_theme(fg=\"white\", bg=\"#7C1D6F\")):\n        \"Total tippers\"\n\n        @render.express\n        def total_tippers():\n            tips_data().shape[0]\n\n    with ui.value_box(showcase=ICONS[\"wallet\"], theme=ui.value_box_theme(fg=\"white\", bg=\"#B9257A\")):\n        \"Average tip\"\n\n        @render.express\n        def average_tip():\n            d = tips_data()\n            if d.shape[0] > 0:\n                perc = d.tip / d.total_bill\n                f\"{perc.mean():.1%}\"\n\n\n    with ui.value_box(showcase=ICONS[\"currency-dollar\"], theme=ui.value_box_theme(fg=\"white\", bg=\"#FAA476\")):\n        \"Average bill\"\n\n        @render.express\n        def average_bill():\n            d = tips_data()  # Get the filtered data\n            if d.shape[0] > 0:\n                bill = d.total_bill.mean()  # Calculate the average bill\n                f\"${bill:.2f}\"  # The function will output this value without returning it\n\n\nwith ui.layout_columns(col_widths=[6, 6, 12]):\n    with ui.card(full_screen=True, style=\"height: 300px;\"):\n        ui.card_header(\"Tips data\", style=\"background-color: white;\")\n\n        @render.data_frame\n        def table():\n            return render.DataGrid(tips_data())\n\n    with ui.card(full_screen=True, style=\"height: 300px;\"):\n        with ui.card_header(class_=\"d-flex justify-content-between align-items-center\", style=\"background-color: white;\"):\n            \"Total bill vs tip\"\n            with ui.popover(title=\"Add a color variable\", placement=\"top\"):\n                ICONS[\"ellipsis\"]\n                ui.input_radio_buttons(\n                    \"scatter_color\",\n                    None,\n                    [\"none\", \"sex\", \"day\", \"time\"],\n                    inline=True,\n                )\n\n        @render_plotly\n        def scatterplot():\n            color = input.scatter_color()\n            custom_colors = [\"#7C1D6F\", \"#FAA476\", \"#B9257A\", \"#FCDE9C\"]  # Custom color palette\n            \n            # Get the data\n            df = tips_data()\n\n            # Calculate a simple linear trendline\n            trendline = np.polyfit(df[\"total_bill\"], df[\"tip\"], 1)  # First-degree polynomial (line)\n            trend_fn = np.poly1d(trendline)\n\n            # Create scatterplot\n            fig = px.scatter(\n                df,\n                x=\"total_bill\",\n                y=\"tip\",\n                color_discrete_sequence=custom_colors,\n                color=None if color == \"none\" else color,\n            )\n\n            # Add trendline to the plot\n            fig.add_scatter(\n                x=df[\"total_bill\"],\n                y=trend_fn(df[\"total_bill\"]),\n                mode=\"lines\",\n                line=dict(color=\"#B9257A\"),  # Trendline color\n                name=\"Trendline\",\n            )\n            \n            # Update the layout to adjust the legend\n            fig.update_layout(\n                legend=dict(\n                    orientation=\"h\",  # Horizontal legend layout\n                    yanchor=\"bottom\",  # Align legend to the bottom\n                    y=1.02,  # Position above the plot\n                    xanchor=\"center\",  # Center align horizontally\n                    x=0.5,  # Center of the plot\n                    font=dict(size=10),  # Shrink font size\n                    itemwidth=30,  # Compress legend item width\n                ),\n            )\n\n            return fig\n\n\n\nwith ui.layout_columns():\n        with ui.card(full_screen=True, style=\"height: 300px;\"):\n            ui.card_header(\"Tip Percentages\", style=\"background-color: white;\") \n\n            @render.image\n            def image():\n                # Get the path to the current directory\n                dir = Path(__file__).resolve().parent\n\n                # Create the image path and return it as an ImgData object\n                img = {\"src\": str(dir / \"ridgeplot_image.png\"), \"width\": \"100%\", \"style\": \"object-fit: contain;\"}\n                return img\n         \n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n# Reactive data filtering\n@reactive.calc\ndef tips_data():\n    # Get the selected day from the radio buttons\n    selected_day = input.filter_days()  # Now this covers \"All\" and specific days\n\n    # Determine filtering logic based on the selected option\n    if selected_day == \"All\":\n        idx3 = tips.day.isin([\"Thur\", \"Fri\", \"Sat\", \"Sun\"])  # Include all days\n    else:\n        idx3 = tips.day == selected_day  # Filter by the selected day\n\n    # Additional filters (for bill and time)\n    idx1 = tips.total_bill.between(input.total_bill()[0], input.total_bill()[1])\n    idx2 = tips.time.isin(input.time())\n\n    # Apply all filters and calculate tip percentage\n    filtered = tips[idx1 & idx2 & idx3]\n    filtered[\"tip_percentage\"] = ((filtered.tip / filtered.total_bill) * 100).round(2)\n    return filtered\n\n@reactive.effect\n@reactive.event(input.reset)\ndef reset_filters():\n    # Reset the filters to their default values\n    ui.update_slider(\"total_bill\", value=bill_rng)\n    ui.update_checkbox_group(\"time\", selected=[\"Lunch\", \"Dinner\"])\n    ui.update_radio_buttons(\"filter_days\", selected=\"All\")  # Reset filter_option\n\n\n\n\n", "type": "text"}, {"name": "ridgeplot_image.png", "content": "", "type": "binary"}, {"name": "shared.py", "content": "from pathlib import Path\nimport pandas as pd\n\napp_dir = Path(__file__).parent\ntips = pd.read_csv(app_dir / \"tips.csv\")\n\n# MODIFY TIP VALUES TO BE MORE REALISTIC #\n\n# Step 1: Double every value in the total_bill column\ntips['total_bill'] = tips['total_bill'] * 2\n\n# Step 2: Double every 10th value in the tip column (in this case, the 10th value is at index 9)\ntips.iloc[9, tips.columns.get_loc('tip')] *= 2\n\n# Step 3: Increase every value in the tip column by 2.7\ntips['tip'] = tips['tip'] * 2.7\n\n# Step 2: Double every 16th value in the tip column (in this case, the 14th value is at index 12)\ntips.iloc[15, tips.columns.get_loc('tip')] *= 2\n\n# Decrease every 8th tip by 25%\ntips.loc[tips.index % 8 == 7, 'tip'] *= 0.75  # Reduce by 25%\n\n# Round the 'tip' column to 2 decimal places\ntips['tip'] = tips['tip'].round(2)\n\n# Remove the 'smoker' column\ntips = tips.drop(columns=['smoker'])\n\n# Add a new column for tip percentage (rounded to 2 decimal places)\ntips['tip_percentage'] = ((tips['tip'] / tips['total_bill']) * 100).round(2)\n\nprint(tips)\n\n", "type": "text"}, {"name": "tips.csv", "content": "total_bill,tip,sex,smoker,day,time,size\n16.99,1.01,Female,No,Sun,Dinner,2\n10.34,1.66,Male,No,Sun,Dinner,3\n21.01,3.5,Male,No,Sun,Dinner,3\n23.68,3.31,Male,No,Sun,Dinner,2\n24.59,3.61,Female,No,Sun,Dinner,4\n25.29,4.71,Male,No,Sun,Dinner,4\n8.77,2.0,Male,No,Sun,Dinner,2\n26.88,3.12,Male,No,Sun,Dinner,4\n15.04,1.96,Male,No,Sun,Dinner,2\n14.78,3.23,Male,No,Sun,Dinner,2\n10.27,1.71,Male,No,Sun,Dinner,2\n35.26,5.0,Female,No,Sun,Dinner,4\n15.42,1.57,Male,No,Sun,Dinner,2\n18.43,3.0,Male,No,Sun,Dinner,4\n14.83,3.02,Female,No,Sun,Dinner,2\n21.58,3.92,Male,No,Sun,Dinner,2\n10.33,1.67,Female,No,Sun,Dinner,3\n16.29,3.71,Male,No,Sun,Dinner,3\n16.97,3.5,Female,No,Sun,Dinner,3\n20.65,3.35,Male,No,Sat,Dinner,3\n17.92,4.08,Male,No,Sat,Dinner,2\n20.29,2.75,Female,No,Sat,Dinner,2\n15.77,2.23,Female,No,Sat,Dinner,2\n39.42,7.58,Male,No,Sat,Dinner,4\n19.82,3.18,Male,No,Sat,Dinner,2\n17.81,2.34,Male,No,Sat,Dinner,4\n13.37,2.0,Male,No,Sat,Dinner,2\n12.69,2.0,Male,No,Sat,Dinner,2\n21.7,4.3,Male,No,Sat,Dinner,2\n19.65,3.0,Female,No,Sat,Dinner,2\n9.55,1.45,Male,No,Sat,Dinner,2\n18.35,2.5,Male,No,Sat,Dinner,4\n15.06,3.0,Female,No,Sat,Dinner,2\n20.69,2.45,Female,No,Sat,Dinner,4\n17.78,3.27,Male,No,Sat,Dinner,2\n24.06,3.6,Male,No,Sat,Dinner,3\n16.31,2.0,Male,No,Sat,Dinner,3\n16.93,3.07,Female,No,Sat,Dinner,3\n18.69,2.31,Male,No,Sat,Dinner,3\n31.27,5.0,Male,No,Sat,Dinner,3\n16.04,2.24,Male,No,Sat,Dinner,3\n17.46,2.54,Male,No,Sun,Dinner,2\n13.94,3.06,Male,No,Sun,Dinner,2\n9.68,1.32,Male,No,Sun,Dinner,2\n30.4,5.6,Male,No,Sun,Dinner,4\n18.29,3.0,Male,No,Sun,Dinner,2\n22.23,5.0,Male,No,Sun,Dinner,2\n32.4,6.0,Male,No,Sun,Dinner,4\n28.55,2.05,Male,No,Sun,Dinner,3\n18.04,3.0,Male,No,Sun,Dinner,2\n12.54,2.5,Male,No,Sun,Dinner,2\n10.29,2.6,Female,No,Sun,Dinner,2\n34.81,5.2,Female,No,Sun,Dinner,4\n9.94,1.56,Male,No,Sun,Dinner,2\n25.56,4.34,Male,No,Sun,Dinner,4\n19.49,3.51,Male,No,Sun,Dinner,2\n38.01,3.0,Male,Yes,Sat,Dinner,4\n26.41,1.5,Female,No,Sat,Dinner,2\n11.24,1.76,Male,Yes,Sat,Dinner,2\n48.27,6.73,Male,No,Sat,Dinner,4\n20.29,3.21,Male,Yes,Sat,Dinner,2\n13.81,2.0,Male,Yes,Sat,Dinner,2\n11.02,1.98,Male,Yes,Sat,Dinner,2\n18.29,3.76,Male,Yes,Sat,Dinner,4\n17.59,2.64,Male,No,Sat,Dinner,3\n20.08,3.15,Male,No,Sat,Dinner,3\n16.45,2.47,Female,No,Sat,Dinner,2\n3.07,1.0,Female,Yes,Sat,Dinner,1\n20.23,2.01,Male,No,Sat,Dinner,2\n15.01,2.09,Male,Yes,Sat,Dinner,2\n12.02,1.97,Male,No,Sat,Dinner,2\n17.07,3.0,Female,No,Sat,Dinner,3\n26.86,3.14,Female,Yes,Sat,Dinner,2\n25.28,5.0,Female,Yes,Sat,Dinner,2\n14.73,2.2,Female,No,Sat,Dinner,2\n10.51,1.25,Male,No,Sat,Dinner,2\n17.92,3.08,Male,Yes,Sat,Dinner,2\n27.2,4.0,Male,No,Thur,Lunch,4\n22.76,3.0,Male,No,Thur,Lunch,2\n17.29,2.71,Male,No,Thur,Lunch,2\n19.44,3.0,Male,Yes,Thur,Lunch,2\n16.66,3.4,Male,No,Thur,Lunch,2\n10.07,1.83,Female,No,Thur,Lunch,1\n32.68,5.0,Male,Yes,Thur,Lunch,2\n15.98,2.03,Male,No,Thur,Lunch,2\n34.83,5.17,Female,No,Thur,Lunch,4\n13.03,2.0,Male,No,Thur,Lunch,2\n18.28,4.0,Male,No,Thur,Lunch,2\n24.71,5.85,Male,No,Thur,Lunch,2\n21.16,3.0,Male,No,Thur,Lunch,2\n28.97,3.0,Male,Yes,Fri,Dinner,2\n22.49,3.5,Male,No,Fri,Dinner,2\n5.75,1.0,Female,Yes,Fri,Dinner,2\n16.32,4.3,Female,Yes,Fri,Dinner,2\n22.75,3.25,Female,No,Fri,Dinner,2\n40.17,4.73,Male,Yes,Fri,Dinner,4\n27.28,4.0,Male,Yes,Fri,Dinner,2\n12.03,1.5,Male,Yes,Fri,Dinner,2\n21.01,3.0,Male,Yes,Fri,Dinner,2\n12.46,1.5,Male,No,Fri,Dinner,2\n11.35,2.5,Female,Yes,Fri,Dinner,2\n15.38,3.0,Female,Yes,Fri,Dinner,2\n44.3,2.5,Female,Yes,Sat,Dinner,3\n22.42,3.48,Female,Yes,Sat,Dinner,2\n20.92,4.08,Female,No,Sat,Dinner,2\n15.36,1.64,Male,Yes,Sat,Dinner,2\n20.49,4.06,Male,Yes,Sat,Dinner,2\n25.21,4.29,Male,Yes,Sat,Dinner,2\n18.24,3.76,Male,No,Sat,Dinner,2\n14.31,4.0,Female,Yes,Sat,Dinner,2\n14.0,3.0,Male,No,Sat,Dinner,2\n7.25,1.0,Female,No,Sat,Dinner,1\n38.07,4.0,Male,No,Sun,Dinner,3\n23.95,2.55,Male,No,Sun,Dinner,2\n25.71,4.0,Female,No,Sun,Dinner,3\n17.31,3.5,Female,No,Sun,Dinner,2\n29.93,5.07,Male,No,Sun,Dinner,4\n10.65,1.5,Female,No,Thur,Lunch,2\n12.43,1.8,Female,No,Thur,Lunch,2\n24.08,2.92,Female,No,Thur,Lunch,4\n11.69,2.31,Male,No,Thur,Lunch,2\n13.42,1.68,Female,No,Thur,Lunch,2\n14.26,2.5,Male,No,Thur,Lunch,2\n15.95,2.0,Male,No,Thur,Lunch,2\n12.48,2.52,Female,No,Thur,Lunch,2\n29.8,4.2,Female,No,Thur,Lunch,6\n8.52,1.48,Male,No,Thur,Lunch,2\n14.52,2.0,Female,No,Thur,Lunch,2\n11.38,2.0,Female,No,Thur,Lunch,2\n22.82,2.18,Male,No,Thur,Lunch,3\n19.08,1.5,Male,No,Thur,Lunch,2\n20.27,2.83,Female,No,Thur,Lunch,2\n11.17,1.5,Female,No,Thur,Lunch,2\n12.26,2.0,Female,No,Thur,Lunch,2\n18.26,3.25,Female,No,Thur,Lunch,2\n8.51,1.25,Female,No,Thur,Lunch,2\n10.33,2.0,Female,No,Thur,Lunch,2\n14.15,2.0,Female,No,Thur,Lunch,2\n16.0,2.0,Male,Yes,Thur,Lunch,2\n13.16,2.75,Female,No,Thur,Lunch,2\n17.47,3.5,Female,No,Thur,Lunch,2\n34.3,6.7,Male,No,Thur,Lunch,6\n41.19,5.0,Male,No,Thur,Lunch,5\n27.05,5.0,Female,No,Thur,Lunch,6\n16.43,2.3,Female,No,Thur,Lunch,2\n8.35,1.5,Female,No,Thur,Lunch,2\n18.64,1.36,Female,No,Thur,Lunch,3\n11.87,1.63,Female,No,Thur,Lunch,2\n9.78,1.73,Male,No,Thur,Lunch,2\n7.51,2.0,Male,No,Thur,Lunch,2\n14.07,2.5,Male,No,Sun,Dinner,2\n13.13,2.0,Male,No,Sun,Dinner,2\n17.26,2.74,Male,No,Sun,Dinner,3\n24.55,2.0,Male,No,Sun,Dinner,4\n19.77,2.0,Male,No,Sun,Dinner,4\n29.85,5.14,Female,No,Sun,Dinner,5\n48.17,5.0,Male,No,Sun,Dinner,6\n25.0,3.75,Female,No,Sun,Dinner,4\n13.39,2.61,Female,No,Sun,Dinner,2\n16.49,2.0,Male,No,Sun,Dinner,4\n21.5,3.5,Male,No,Sun,Dinner,4\n12.66,2.5,Male,No,Sun,Dinner,2\n16.21,2.0,Female,No,Sun,Dinner,3\n13.81,2.0,Male,No,Sun,Dinner,2\n17.51,3.0,Female,Yes,Sun,Dinner,2\n24.52,3.48,Male,No,Sun,Dinner,3\n20.76,2.24,Male,No,Sun,Dinner,2\n31.71,4.5,Male,No,Sun,Dinner,4\n10.59,1.61,Female,Yes,Sat,Dinner,2\n10.63,2.0,Female,Yes,Sat,Dinner,2\n50.81,10.0,Male,Yes,Sat,Dinner,3\n15.81,3.16,Male,Yes,Sat,Dinner,2\n7.25,5.15,Male,Yes,Sun,Dinner,2\n31.85,3.18,Male,Yes,Sun,Dinner,2\n16.82,4.0,Male,Yes,Sun,Dinner,2\n32.9,3.11,Male,Yes,Sun,Dinner,2\n17.89,2.0,Male,Yes,Sun,Dinner,2\n14.48,2.0,Male,Yes,Sun,Dinner,2\n9.6,4.0,Female,Yes,Sun,Dinner,2\n34.63,3.55,Male,Yes,Sun,Dinner,2\n34.65,3.68,Male,Yes,Sun,Dinner,4\n23.33,5.65,Male,Yes,Sun,Dinner,2\n45.35,3.5,Male,Yes,Sun,Dinner,3\n23.17,6.5,Male,Yes,Sun,Dinner,4\n40.55,3.0,Male,Yes,Sun,Dinner,2\n20.69,5.0,Male,No,Sun,Dinner,5\n20.9,3.5,Female,Yes,Sun,Dinner,3\n30.46,2.0,Male,Yes,Sun,Dinner,5\n18.15,3.5,Female,Yes,Sun,Dinner,3\n23.1,4.0,Male,Yes,Sun,Dinner,3\n15.69,1.5,Male,Yes,Sun,Dinner,2\n19.81,4.19,Female,Yes,Thur,Lunch,2\n28.44,2.56,Male,Yes,Thur,Lunch,2\n15.48,2.02,Male,Yes,Thur,Lunch,2\n16.58,4.0,Male,Yes,Thur,Lunch,2\n7.56,1.44,Male,No,Thur,Lunch,2\n10.34,2.0,Male,Yes,Thur,Lunch,2\n43.11,5.0,Female,Yes,Thur,Lunch,4\n13.0,2.0,Female,Yes,Thur,Lunch,2\n13.51,2.0,Male,Yes,Thur,Lunch,2\n18.71,4.0,Male,Yes,Thur,Lunch,3\n12.74,2.01,Female,Yes,Thur,Lunch,2\n13.0,2.0,Female,Yes,Thur,Lunch,2\n16.4,2.5,Female,Yes,Thur,Lunch,2\n20.53,4.0,Male,Yes,Thur,Lunch,4\n16.47,3.23,Female,Yes,Thur,Lunch,3\n26.59,3.41,Male,Yes,Sat,Dinner,3\n38.73,3.0,Male,Yes,Sat,Dinner,4\n24.27,2.03,Male,Yes,Sat,Dinner,2\n12.76,2.23,Female,Yes,Sat,Dinner,2\n30.06,2.0,Male,Yes,Sat,Dinner,3\n25.89,5.16,Male,Yes,Sat,Dinner,4\n48.33,9.0,Male,No,Sat,Dinner,4\n13.27,2.5,Female,Yes,Sat,Dinner,2\n28.17,6.5,Female,Yes,Sat,Dinner,3\n12.9,1.1,Female,Yes,Sat,Dinner,2\n28.15,3.0,Male,Yes,Sat,Dinner,5\n11.59,1.5,Male,Yes,Sat,Dinner,2\n7.74,1.44,Male,Yes,Sat,Dinner,2\n30.14,3.09,Female,Yes,Sat,Dinner,4\n12.16,2.2,Male,Yes,Fri,Lunch,2\n13.42,3.48,Female,Yes,Fri,Lunch,2\n8.58,1.92,Male,Yes,Fri,Lunch,1\n15.98,3.0,Female,No,Fri,Lunch,3\n13.42,1.58,Male,Yes,Fri,Lunch,2\n16.27,2.5,Female,Yes,Fri,Lunch,2\n10.09,2.0,Female,Yes,Fri,Lunch,2\n20.45,3.0,Male,No,Sat,Dinner,4\n13.28,2.72,Male,No,Sat,Dinner,2\n22.12,2.88,Female,Yes,Sat,Dinner,2\n24.01,2.0,Male,Yes,Sat,Dinner,4\n15.69,3.0,Male,Yes,Sat,Dinner,3\n11.61,3.39,Male,No,Sat,Dinner,2\n10.77,1.47,Male,No,Sat,Dinner,2\n15.53,3.0,Male,Yes,Sat,Dinner,2\n10.07,1.25,Male,No,Sat,Dinner,2\n12.6,1.0,Male,Yes,Sat,Dinner,2\n32.83,1.17,Male,Yes,Sat,Dinner,2\n35.83,4.67,Female,No,Sat,Dinner,3\n29.03,5.92,Male,No,Sat,Dinner,3\n27.18,2.0,Female,Yes,Sat,Dinner,2\n22.67,2.0,Male,Yes,Sat,Dinner,2\n17.82,1.75,Male,No,Sat,Dinner,2\n18.78,3.0,Female,No,Thur,Dinner,2\n", "type": "text"}]